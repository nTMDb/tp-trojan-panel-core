// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: node_api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApiNodeServiceClient is the client API for ApiNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiNodeServiceClient interface {
	AddNode(ctx context.Context, in *NodeAddDto, opts ...grpc.CallOption) (*Response, error)
	RemoveNode(ctx context.Context, in *NodeRemoveDto, opts ...grpc.CallOption) (*Response, error)
	RemoveAccount(ctx context.Context, in *AccountRemoveDto, opts ...grpc.CallOption) (*Response, error)
}

type apiNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiNodeServiceClient(cc grpc.ClientConnInterface) ApiNodeServiceClient {
	return &apiNodeServiceClient{cc}
}

func (c *apiNodeServiceClient) AddNode(ctx context.Context, in *NodeAddDto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ApiNodeService/AddNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiNodeServiceClient) RemoveNode(ctx context.Context, in *NodeRemoveDto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ApiNodeService/RemoveNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiNodeServiceClient) RemoveAccount(ctx context.Context, in *AccountRemoveDto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ApiNodeService/RemoveAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiNodeServiceServer is the server API for ApiNodeService service.
// All implementations must embed UnimplementedApiNodeServiceServer
// for forward compatibility
type ApiNodeServiceServer interface {
	AddNode(context.Context, *NodeAddDto) (*Response, error)
	RemoveNode(context.Context, *NodeRemoveDto) (*Response, error)
	RemoveAccount(context.Context, *AccountRemoveDto) (*Response, error)
	mustEmbedUnimplementedApiNodeServiceServer()
}

// UnimplementedApiNodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiNodeServiceServer struct {
}

func (UnimplementedApiNodeServiceServer) AddNode(context.Context, *NodeAddDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNode not implemented")
}
func (UnimplementedApiNodeServiceServer) RemoveNode(context.Context, *NodeRemoveDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveNode not implemented")
}
func (UnimplementedApiNodeServiceServer) RemoveAccount(context.Context, *AccountRemoveDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAccount not implemented")
}
func (UnimplementedApiNodeServiceServer) mustEmbedUnimplementedApiNodeServiceServer() {}

// UnsafeApiNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiNodeServiceServer will
// result in compilation errors.
type UnsafeApiNodeServiceServer interface {
	mustEmbedUnimplementedApiNodeServiceServer()
}

func RegisterApiNodeServiceServer(s grpc.ServiceRegistrar, srv ApiNodeServiceServer) {
	s.RegisterService(&ApiNodeService_ServiceDesc, srv)
}

func _ApiNodeService_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeAddDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiNodeServiceServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiNodeService/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiNodeServiceServer).AddNode(ctx, req.(*NodeAddDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiNodeService_RemoveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeRemoveDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiNodeServiceServer).RemoveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiNodeService/RemoveNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiNodeServiceServer).RemoveNode(ctx, req.(*NodeRemoveDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiNodeService_RemoveAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountRemoveDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiNodeServiceServer).RemoveAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ApiNodeService/RemoveAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiNodeServiceServer).RemoveAccount(ctx, req.(*AccountRemoveDto))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiNodeService_ServiceDesc is the grpc.ServiceDesc for ApiNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiNodeService",
	HandlerType: (*ApiNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNode",
			Handler:    _ApiNodeService_AddNode_Handler,
		},
		{
			MethodName: "RemoveNode",
			Handler:    _ApiNodeService_RemoveNode_Handler,
		},
		{
			MethodName: "RemoveAccount",
			Handler:    _ApiNodeService_RemoveAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node_api.proto",
}
