// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: proxy_api.proto

package proxy

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiProxyService_StartProxy_FullMethodName = "/ApiProxyService/StartProxy"
	ApiProxyService_StopProxy_FullMethodName  = "/ApiProxyService/StopProxy"
)

// ApiProxyServiceClient is the client API for ApiProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiProxyServiceClient interface {
	StartProxy(ctx context.Context, in *StartProxyDto, opts ...grpc.CallOption) (*Response, error)
	StopProxy(ctx context.Context, in *StopProxyDto, opts ...grpc.CallOption) (*Response, error)
}

type apiProxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiProxyServiceClient(cc grpc.ClientConnInterface) ApiProxyServiceClient {
	return &apiProxyServiceClient{cc}
}

func (c *apiProxyServiceClient) StartProxy(ctx context.Context, in *StartProxyDto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiProxyService_StartProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiProxyServiceClient) StopProxy(ctx context.Context, in *StopProxyDto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiProxyService_StopProxy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiProxyServiceServer is the server API for ApiProxyService service.
// All implementations should embed UnimplementedApiProxyServiceServer
// for forward compatibility
type ApiProxyServiceServer interface {
	StartProxy(context.Context, *StartProxyDto) (*Response, error)
	StopProxy(context.Context, *StopProxyDto) (*Response, error)
}

// UnimplementedApiProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiProxyServiceServer struct {
}

func (UnimplementedApiProxyServiceServer) StartProxy(context.Context, *StartProxyDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProxy not implemented")
}
func (UnimplementedApiProxyServiceServer) StopProxy(context.Context, *StopProxyDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopProxy not implemented")
}

// UnsafeApiProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiProxyServiceServer will
// result in compilation errors.
type UnsafeApiProxyServiceServer interface {
	mustEmbedUnimplementedApiProxyServiceServer()
}

func RegisterApiProxyServiceServer(s grpc.ServiceRegistrar, srv ApiProxyServiceServer) {
	s.RegisterService(&ApiProxyService_ServiceDesc, srv)
}

func _ApiProxyService_StartProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProxyDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiProxyServiceServer).StartProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiProxyService_StartProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiProxyServiceServer).StartProxy(ctx, req.(*StartProxyDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiProxyService_StopProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopProxyDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiProxyServiceServer).StopProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiProxyService_StopProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiProxyServiceServer).StopProxy(ctx, req.(*StopProxyDto))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiProxyService_ServiceDesc is the grpc.ServiceDesc for ApiProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiProxyService",
	HandlerType: (*ApiProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartProxy",
			Handler:    _ApiProxyService_StartProxy_Handler,
		},
		{
			MethodName: "StopProxy",
			Handler:    _ApiProxyService_StopProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy_api.proto",
}
