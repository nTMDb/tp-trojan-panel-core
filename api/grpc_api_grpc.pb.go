// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.4
// source: grpc_api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ApiNodeService_CreateNode_FullMethodName = "/ApiNodeService/CreateNode"
	ApiNodeService_DeleteNode_FullMethodName = "/ApiNodeService/DeleteNode"
	ApiNodeService_GetNode_FullMethodName    = "/ApiNodeService/GetNode"
)

// ApiNodeServiceClient is the client API for ApiNodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiNodeServiceClient interface {
	CreateNode(ctx context.Context, in *NodeCreateDto, opts ...grpc.CallOption) (*Response, error)
	DeleteNode(ctx context.Context, in *NodeDeleteDto, opts ...grpc.CallOption) (*Response, error)
	GetNode(ctx context.Context, in *NodeDto, opts ...grpc.CallOption) (*Response, error)
}

type apiNodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiNodeServiceClient(cc grpc.ClientConnInterface) ApiNodeServiceClient {
	return &apiNodeServiceClient{cc}
}

func (c *apiNodeServiceClient) CreateNode(ctx context.Context, in *NodeCreateDto, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiNodeService_CreateNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiNodeServiceClient) DeleteNode(ctx context.Context, in *NodeDeleteDto, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiNodeService_DeleteNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiNodeServiceClient) GetNode(ctx context.Context, in *NodeDto, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiNodeService_GetNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiNodeServiceServer is the server API for ApiNodeService service.
// All implementations should embed UnimplementedApiNodeServiceServer
// for forward compatibility
type ApiNodeServiceServer interface {
	CreateNode(context.Context, *NodeCreateDto) (*Response, error)
	DeleteNode(context.Context, *NodeDeleteDto) (*Response, error)
	GetNode(context.Context, *NodeDto) (*Response, error)
}

// UnimplementedApiNodeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiNodeServiceServer struct {
}

func (UnimplementedApiNodeServiceServer) CreateNode(context.Context, *NodeCreateDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNode not implemented")
}
func (UnimplementedApiNodeServiceServer) DeleteNode(context.Context, *NodeDeleteDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedApiNodeServiceServer) GetNode(context.Context, *NodeDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}

// UnsafeApiNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiNodeServiceServer will
// result in compilation errors.
type UnsafeApiNodeServiceServer interface {
	mustEmbedUnimplementedApiNodeServiceServer()
}

func RegisterApiNodeServiceServer(s grpc.ServiceRegistrar, srv ApiNodeServiceServer) {
	s.RegisterService(&ApiNodeService_ServiceDesc, srv)
}

func _ApiNodeService_CreateNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeCreateDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiNodeServiceServer).CreateNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiNodeService_CreateNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiNodeServiceServer).CreateNode(ctx, req.(*NodeCreateDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiNodeService_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDeleteDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiNodeServiceServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiNodeService_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiNodeServiceServer).DeleteNode(ctx, req.(*NodeDeleteDto))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiNodeService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiNodeServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiNodeService_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiNodeServiceServer).GetNode(ctx, req.(*NodeDto))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiNodeService_ServiceDesc is the grpc.ServiceDesc for ApiNodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiNodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiNodeService",
	HandlerType: (*ApiNodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNode",
			Handler:    _ApiNodeService_CreateNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _ApiNodeService_DeleteNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _ApiNodeService_GetNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api.proto",
}

const (
	ApiServerService_GetServer_FullMethodName = "/ApiServerService/GetServer"
)

// ApiServerServiceClient is the client API for ApiServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServerServiceClient interface {
	GetServer(ctx context.Context, in *ServerDto, opts ...grpc.CallOption) (*Response, error)
}

type apiServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServerServiceClient(cc grpc.ClientConnInterface) ApiServerServiceClient {
	return &apiServerServiceClient{cc}
}

func (c *apiServerServiceClient) GetServer(ctx context.Context, in *ServerDto, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiServerService_GetServer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServerServiceServer is the server API for ApiServerService service.
// All implementations should embed UnimplementedApiServerServiceServer
// for forward compatibility
type ApiServerServiceServer interface {
	GetServer(context.Context, *ServerDto) (*Response, error)
}

// UnimplementedApiServerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiServerServiceServer struct {
}

func (UnimplementedApiServerServiceServer) GetServer(context.Context, *ServerDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServer not implemented")
}

// UnsafeApiServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServerServiceServer will
// result in compilation errors.
type UnsafeApiServerServiceServer interface {
	mustEmbedUnimplementedApiServerServiceServer()
}

func RegisterApiServerServiceServer(s grpc.ServiceRegistrar, srv ApiServerServiceServer) {
	s.RegisterService(&ApiServerService_ServiceDesc, srv)
}

func _ApiServerService_GetServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServerDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServerServiceServer).GetServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiServerService_GetServer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServerServiceServer).GetServer(ctx, req.(*ServerDto))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiServerService_ServiceDesc is the grpc.ServiceDesc for ApiServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiServerService",
	HandlerType: (*ApiServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServer",
			Handler:    _ApiServerService_GetServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_api.proto",
}
