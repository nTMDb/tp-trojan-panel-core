// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: version_api.proto

package version

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiVersionService_GetVersion_FullMethodName = "/version.ApiVersionService/GetVersion"
)

// ApiVersionServiceClient is the client API for ApiVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiVersionServiceClient interface {
	GetVersion(ctx context.Context, in *ApiVersionDto, opts ...grpc.CallOption) (*Response, error)
}

type apiVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiVersionServiceClient(cc grpc.ClientConnInterface) ApiVersionServiceClient {
	return &apiVersionServiceClient{cc}
}

func (c *apiVersionServiceClient) GetVersion(ctx context.Context, in *ApiVersionDto, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, ApiVersionService_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiVersionServiceServer is the server API for ApiVersionService service.
// All implementations should embed UnimplementedApiVersionServiceServer
// for forward compatibility
type ApiVersionServiceServer interface {
	GetVersion(context.Context, *ApiVersionDto) (*Response, error)
}

// UnimplementedApiVersionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedApiVersionServiceServer struct {
}

func (UnimplementedApiVersionServiceServer) GetVersion(context.Context, *ApiVersionDto) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}

// UnsafeApiVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiVersionServiceServer will
// result in compilation errors.
type UnsafeApiVersionServiceServer interface {
	mustEmbedUnimplementedApiVersionServiceServer()
}

func RegisterApiVersionServiceServer(s grpc.ServiceRegistrar, srv ApiVersionServiceServer) {
	s.RegisterService(&ApiVersionService_ServiceDesc, srv)
}

func _ApiVersionService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApiVersionDto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiVersionServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiVersionService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiVersionServiceServer).GetVersion(ctx, req.(*ApiVersionDto))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiVersionService_ServiceDesc is the grpc.ServiceDesc for ApiVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "version.ApiVersionService",
	HandlerType: (*ApiVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _ApiVersionService_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "version_api.proto",
}
